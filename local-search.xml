<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>servlet</title>
    <link href="/2020/06/25/servlet/"/>
    <url>/2020/06/25/servlet/</url>
    
    <content type="html"><![CDATA[<h3 id="Servlet概述"><a href="#Servlet概述" class="headerlink" title="Servlet概述"></a>Servlet概述</h3><p>Servlet其实就是Java的一个接口，该接口只有五个方法。</p><pre><code class="hljs less"><span class="hljs-selector-tag">init</span>(ServletConfig config);<span class="hljs-comment">//初始化</span><span class="hljs-selector-tag">getServletConfig</span>();<span class="hljs-comment">//获得配置</span><span class="hljs-selector-tag">service</span>(ServletRequest req,ServletResponse res);<span class="hljs-comment">//服务</span><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">getServletInfo</span>();<span class="hljs-comment">//获得信息</span><span class="hljs-selector-tag">destory</span>();<span class="hljs-comment">//销毁</span></code></pre><p>其中service方法最为重要，它的作用是把Tomcat(Servlet容器)传入的请求进行处理，并让Tomcat知道如何向客户端发送请求。客户端传来的请求如何变成ServletRequest类，这就是容器（Tomcat）的作用，容器把客户端的消息解析，封装成ServletRequest，交给Servlet处理。</p><p> Servlet的作用其实就是为java程序提供一个统一的web应用的规范。</p><p>由于service()方法实现复杂，寻找一个已经实现该方法的类，GenericServlet抽象类没有实现该方法，它的子类HttpServlet实现了service方法。HttpServlet虽然在service中帮我们写了请求方式的判断，但是针对每一种请求，业务逻辑代码不同，HttpServlet无法得知子类想法。所以抽出七个方法，提供了默认实现：报405，400错误，提示请求不支持。这种实现很鸡肋，所以不能让它实例化，子类必须至少重写七个doXXX()中的一个，用来处理特定的请求。</p><p>HttpServlet此处使用了模板方法模式，父类把能写的逻辑都写完，把不确定的业务代码抽成一个方法，调用它。当子类重写该方法，整个业务代码就可以使用了。</p><p><strong>一个类声明成抽象方法，一般有两个原因</strong>：1.有抽象方法  2.没有抽象方法，但不希望被实例化。</p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1593054402113.png" srcset="/img/loading.gif" alt="1593054402113"></p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1593054451107.png" srcset="/img/loading.gif" alt="1593054451107"></p><p><img src="https://img-blog.csdn.net/20180506154311160?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1MTAxMDAzNzE5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="这里写图片描述"> </p><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>（1）加载和实例化</p><p>当Servlet容器启动或客户端发送一个请求时，Servlet容器会查找内存中是否存在该Servlet实例，若存在，则直接读取该实例响应请求；如果不存在，就创建一个Servlet实例。</p><p>（2） 初始化【init方法只会在servlet创建时执行一次】</p><p>实例化后，Servlet容器将调用Servlet的init()方法进行初始化（一些准备工作或资源预加载工作）。</p><p>（3）服务</p><p>初始化后，Servlet处于能响应请求的就绪状态。当接收到客户端请求时，调用service()的方法处理客户端请求，HttpServlet的service()方法会根据不同的请求 转调不同的doXxx()方法。</p><p>（4）销毁【destory方法只会在servlet销毁时执行一次】</p><p>当Servlet容器关闭时，Servlet实例也随时销毁。其间，Servlet容器会调用Servlet 的destroy()方法去判断该Servlet是否应当被释放（或回收资源）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/25/hello-world/"/>
    <url>/2020/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
